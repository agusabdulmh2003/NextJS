"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTree_unstable", {
    enumerable: true,
    get: ()=>useTree_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _contexts = require("../../contexts");
const _useSubtree = require("./useSubtree");
const _useRootTree = require("./useRootTree");
const useTree_unstable = (props, ref)=>{
    const isSubtree = (0, _contexts.useTreeContext_unstable)((ctx)=>ctx.level > 0);
    // as isSubtree is static, this doesn't break rule of hooks
    // and if this becomes an issue later on, this can be easily converted
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return isSubtree ? (0, _useSubtree.useSubtree)(props, ref) : (0, _useRootTree.useRootTree)(props, ref);
};
