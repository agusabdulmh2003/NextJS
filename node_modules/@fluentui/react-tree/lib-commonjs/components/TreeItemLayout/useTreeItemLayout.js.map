{"version":3,"sources":["useTreeItemLayout.js"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, isResolvedShorthand, resolveShorthand, useMergedRefs } from '@fluentui/react-utilities';\nimport { useTreeItemContext_unstable } from '../../contexts/treeItemContext';\nimport { TreeItemChevron } from '../TreeItemChevron';\n/**\n * Create the state required to render TreeItemLayout.\n *\n * The returned state can be modified with hooks such as useTreeItemLayoutStyles_unstable,\n * before being passed to renderTreeItemLayout_unstable.\n *\n * @param props - props from this instance of TreeItemLayout\n * @param ref - reference to root HTMLElement of TreeItemLayout\n */ export const useTreeItemLayout_unstable = (props, ref)=>{\n    const { iconAfter , iconBefore , expandIcon , as ='span'  } = props;\n    const layoutRef = useTreeItemContext_unstable((ctx)=>ctx.layoutRef);\n    const expandIconRef = useTreeItemContext_unstable((ctx)=>ctx.expandIconRef);\n    const isBranch = useTreeItemContext_unstable((ctx)=>ctx.itemType === 'branch');\n    return {\n        components: {\n            root: 'div',\n            expandIcon: 'div',\n            iconBefore: 'div',\n            iconAfter: 'div'\n        },\n        root: getNativeElementProps(as, {\n            ...props,\n            ref: useMergedRefs(ref, layoutRef)\n        }),\n        iconBefore: resolveShorthand(iconBefore, {\n            defaultProps: {\n                'aria-hidden': true\n            }\n        }),\n        iconAfter: resolveShorthand(iconAfter, {\n            defaultProps: {\n                'aria-hidden': true\n            }\n        }),\n        expandIcon: resolveShorthand(expandIcon, {\n            required: isBranch,\n            defaultProps: {\n                children: /*#__PURE__*/ React.createElement(TreeItemChevron, null),\n                'aria-hidden': true,\n                ref: useMergedRefs(isResolvedShorthand(expandIcon) ? expandIcon.ref : undefined, expandIconRef)\n            }\n        })\n    };\n};\n"],"names":["useTreeItemLayout_unstable","props","ref","iconAfter","iconBefore","expandIcon","as","layoutRef","useTreeItemContext_unstable","ctx","expandIconRef","isBranch","itemType","components","root","getNativeElementProps","useMergedRefs","resolveShorthand","defaultProps","required","children","React","createElement","TreeItemChevron","isResolvedShorthand","undefined"],"mappings":";;;;+BAYiBA;;aAAAA;;;6DAZM;gCACqE;iCAChD;iCACZ;AASrB,MAAMA,6BAA6B,CAACC,OAAOC,MAAM;IACxD,MAAM,EAAEC,UAAS,EAAGC,WAAU,EAAGC,WAAU,EAAGC,IAAI,OAAM,EAAG,GAAGL;IAC9D,MAAMM,YAAYC,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIF,SAAS;IAClE,MAAMG,gBAAgBF,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIC,aAAa;IAC1E,MAAMC,WAAWH,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIG,QAAQ,KAAK;IACrE,OAAO;QACHC,YAAY;YACRC,MAAM;YACNT,YAAY;YACZD,YAAY;YACZD,WAAW;QACf;QACAW,MAAMC,IAAAA,qCAAqB,EAACT,IAAI;YAC5B,GAAGL,KAAK;YACRC,KAAKc,IAAAA,6BAAa,EAACd,KAAKK;QAC5B;QACAH,YAAYa,IAAAA,gCAAgB,EAACb,YAAY;YACrCc,cAAc;gBACV,eAAe,IAAI;YACvB;QACJ;QACAf,WAAWc,IAAAA,gCAAgB,EAACd,WAAW;YACnCe,cAAc;gBACV,eAAe,IAAI;YACvB;QACJ;QACAb,YAAYY,IAAAA,gCAAgB,EAACZ,YAAY;YACrCc,UAAUR;YACVO,cAAc;gBACVE,UAAU,WAAW,GAAGC,OAAMC,aAAa,CAACC,gCAAe,EAAE,IAAI;gBACjE,eAAe,IAAI;gBACnBrB,KAAKc,IAAAA,6BAAa,EAACQ,IAAAA,mCAAmB,EAACnB,cAAcA,WAAWH,GAAG,GAAGuB,SAAS,EAAEf;YACrF;QACJ;IACJ;AACJ"}