{"version":3,"sources":["useTableSelection.js"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { createSelectionManager } from './selectionManager';\nconst noop = ()=>undefined;\nexport const defaultTableSelectionState = {\n    allRowsSelected: false,\n    clearRows: noop,\n    deselectRow: noop,\n    isRowSelected: ()=>false,\n    selectRow: noop,\n    selectedRows: new Set(),\n    someRowsSelected: false,\n    toggleAllRows: noop,\n    toggleRow: noop,\n    selectionMode: 'multiselect'\n};\nexport function useTableSelection(options) {\n    // False positive, these plugin hooks are intended to be run on every render\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (tableState)=>useTableSelectionState(tableState, options);\n}\nexport function useTableSelectionState(tableState, options) {\n    const { items , getRowId  } = tableState;\n    const { selectionMode , defaultSelectedItems , selectedItems , onSelectionChange  } = options;\n    const [selected, setSelected] = useControllableState({\n        initialState: new Set(),\n        defaultState: React.useMemo(()=>defaultSelectedItems && createSetFromIterable(defaultSelectedItems), [\n            defaultSelectedItems\n        ]),\n        state: React.useMemo(()=>selectedItems && createSetFromIterable(selectedItems), [\n            selectedItems\n        ])\n    });\n    const selectionManager = React.useMemo(()=>{\n        return createSelectionManager(selectionMode, (e, newSelectedItems)=>{\n            setSelected(()=>{\n                onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(e, {\n                    selectedItems: newSelectedItems\n                });\n                return newSelectedItems;\n            });\n        });\n    }, [\n        onSelectionChange,\n        selectionMode,\n        setSelected\n    ]);\n    const toggleAllRows = useEventCallback((e)=>{\n        var _getRowId;\n        selectionManager.toggleAllItems(e, items.map((item, i)=>{\n            return (_getRowId = getRowId === null || getRowId === void 0 ? void 0 : getRowId(item)) !== null && _getRowId !== void 0 ? _getRowId : i;\n        }), selected);\n    });\n    const toggleRow = useEventCallback((e, rowId)=>selectionManager.toggleItem(e, rowId, selected));\n    const deselectRow = useEventCallback((e, rowId)=>selectionManager.deselectItem(e, rowId, selected));\n    const selectRow = useEventCallback((e, rowId)=>selectionManager.selectItem(e, rowId, selected));\n    const isRowSelected = (rowId)=>selectionManager.isSelected(rowId, selected);\n    return {\n        ...tableState,\n        selection: {\n            selectionMode,\n            someRowsSelected: selected.size > 0,\n            allRowsSelected: selectionMode === 'single' ? selected.size > 0 : selected.size === items.length,\n            selectedRows: selected,\n            toggleRow,\n            toggleAllRows,\n            clearRows: selectionManager.clearItems,\n            deselectRow,\n            selectRow,\n            isRowSelected\n        }\n    };\n}\n/**\n * Creates a set from a given iterable, in case the iterable is a set itself, returns the given set instead.\n */ function createSetFromIterable(iterable) {\n    return iterable instanceof Set ? iterable : new Set(iterable);\n}\n"],"names":["defaultTableSelectionState","useTableSelection","useTableSelectionState","noop","undefined","allRowsSelected","clearRows","deselectRow","isRowSelected","selectRow","selectedRows","Set","someRowsSelected","toggleAllRows","toggleRow","selectionMode","options","tableState","items","getRowId","defaultSelectedItems","selectedItems","onSelectionChange","selected","setSelected","useControllableState","initialState","defaultState","React","useMemo","createSetFromIterable","state","selectionManager","createSelectionManager","e","newSelectedItems","useEventCallback","_getRowId","toggleAllItems","map","item","i","rowId","toggleItem","deselectItem","selectItem","isSelected","selection","size","length","clearItems","iterable"],"mappings":";;;;;;;;;;;IAIaA,0BAA0B,MAA1BA;IAYGC,iBAAiB,MAAjBA;IAKAC,sBAAsB,MAAtBA;;;6DArBO;gCACgC;kCAChB;AACvC,MAAMC,OAAO,IAAIC;AACV,MAAMJ,6BAA6B;IACtCK,iBAAiB,KAAK;IACtBC,WAAWH;IACXI,aAAaJ;IACbK,eAAe,IAAI,KAAK;IACxBC,WAAWN;IACXO,cAAc,IAAIC;IAClBC,kBAAkB,KAAK;IACvBC,eAAeV;IACfW,WAAWX;IACXY,eAAe;AACnB;AACO,SAASd,kBAAkBe,OAAO,EAAE;IACvC,4EAA4E;IAC5E,sDAAsD;IACtD,OAAO,CAACC,aAAaf,uBAAuBe,YAAYD;AAC5D;AACO,SAASd,uBAAuBe,UAAU,EAAED,OAAO,EAAE;IACxD,MAAM,EAAEE,MAAK,EAAGC,SAAQ,EAAG,GAAGF;IAC9B,MAAM,EAAEF,cAAa,EAAGK,qBAAoB,EAAGC,cAAa,EAAGC,kBAAiB,EAAG,GAAGN;IACtF,MAAM,CAACO,UAAUC,YAAY,GAAGC,IAAAA,oCAAoB,EAAC;QACjDC,cAAc,IAAIf;QAClBgB,cAAcC,OAAMC,OAAO,CAAC,IAAIT,wBAAwBU,sBAAsBV,uBAAuB;YACjGA;SACH;QACDW,OAAOH,OAAMC,OAAO,CAAC,IAAIR,iBAAiBS,sBAAsBT,gBAAgB;YAC5EA;SACH;IACL;IACA,MAAMW,mBAAmBJ,OAAMC,OAAO,CAAC,IAAI;QACvC,OAAOI,IAAAA,wCAAsB,EAAClB,eAAe,CAACmB,GAAGC,mBAAmB;YAChEX,YAAY,IAAI;gBACZF,sBAAsB,IAAI,IAAIA,sBAAsB,KAAK,IAAI,KAAK,IAAIA,kBAAkBY,GAAG;oBACvFb,eAAec;gBACnB,EAAE;gBACF,OAAOA;YACX;QACJ;IACJ,GAAG;QACCb;QACAP;QACAS;KACH;IACD,MAAMX,gBAAgBuB,IAAAA,gCAAgB,EAAC,CAACF,IAAI;QACxC,IAAIG;QACJL,iBAAiBM,cAAc,CAACJ,GAAGhB,MAAMqB,GAAG,CAAC,CAACC,MAAMC,IAAI;YACpD,OAAO,AAACJ,CAAAA,YAAYlB,aAAa,IAAI,IAAIA,aAAa,KAAK,IAAI,KAAK,IAAIA,SAASqB,KAAK,AAAD,MAAO,IAAI,IAAIH,cAAc,KAAK,IAAIA,YAAYI,CAAC;QAC5I,IAAIlB;IACR;IACA,MAAMT,YAAYsB,IAAAA,gCAAgB,EAAC,CAACF,GAAGQ,QAAQV,iBAAiBW,UAAU,CAACT,GAAGQ,OAAOnB;IACrF,MAAMhB,cAAc6B,IAAAA,gCAAgB,EAAC,CAACF,GAAGQ,QAAQV,iBAAiBY,YAAY,CAACV,GAAGQ,OAAOnB;IACzF,MAAMd,YAAY2B,IAAAA,gCAAgB,EAAC,CAACF,GAAGQ,QAAQV,iBAAiBa,UAAU,CAACX,GAAGQ,OAAOnB;IACrF,MAAMf,gBAAgB,CAACkC,QAAQV,iBAAiBc,UAAU,CAACJ,OAAOnB;IAClE,OAAO;QACH,GAAGN,UAAU;QACb8B,WAAW;YACPhC;YACAH,kBAAkBW,SAASyB,IAAI,GAAG;YAClC3C,iBAAiBU,kBAAkB,WAAWQ,SAASyB,IAAI,GAAG,IAAIzB,SAASyB,IAAI,KAAK9B,MAAM+B,MAAM;YAChGvC,cAAca;YACdT;YACAD;YACAP,WAAW0B,iBAAiBkB,UAAU;YACtC3C;YACAE;YACAD;QACJ;IACJ;AACJ;AACA;;CAEC,GAAG,SAASsB,sBAAsBqB,QAAQ,EAAE;IACzC,OAAOA,oBAAoBxC,MAAMwC,WAAW,IAAIxC,IAAIwC,SAAS;AACjE"}