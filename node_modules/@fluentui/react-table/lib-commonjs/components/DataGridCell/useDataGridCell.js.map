{"version":3,"sources":["useDataGridCell.js"],"sourcesContent":["import * as React from 'react';\nimport { useTableCell_unstable } from '../TableCell/useTableCell';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { useColumnIdContext } from '../../contexts/columnIdContext';\n/**\n * Create the state required to render DataGridCell.\n *\n * The returned state can be modified with hooks such as useDataGridCellStyles_unstable,\n * before being passed to renderDataGridCell_unstable.\n *\n * @param props - props from this instance of DataGridCell\n * @param ref - reference to root HTMLElement of DataGridCell\n */ export const useDataGridCell_unstable = (props, ref)=>{\n    const columnId = useColumnIdContext();\n    const tabbable = useDataGridContext_unstable((ctx)=>ctx.focusMode === 'cell');\n    const resizableColumns = useDataGridContext_unstable((ctx)=>ctx.resizableColumns);\n    const columnSizing = useDataGridContext_unstable((ctx)=>ctx.columnSizing_unstable);\n    return useTableCell_unstable({\n        as: 'div',\n        role: 'gridcell',\n        tabIndex: tabbable ? 0 : undefined,\n        ...resizableColumns ? columnSizing.getTableCellProps(columnId) : {},\n        ...props\n    }, ref);\n};\n"],"names":["useDataGridCell_unstable","props","ref","columnId","useColumnIdContext","tabbable","useDataGridContext_unstable","ctx","focusMode","resizableColumns","columnSizing","columnSizing_unstable","useTableCell_unstable","as","role","tabIndex","undefined","getTableCellProps"],"mappings":";;;;+BAYiBA;;aAAAA;;;6DAZM;8BACe;iCACM;iCACT;AASxB,MAAMA,2BAA2B,CAACC,OAAOC,MAAM;IACtD,MAAMC,WAAWC,IAAAA,mCAAkB;IACnC,MAAMC,WAAWC,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIC,SAAS,KAAK;IACtE,MAAMC,mBAAmBH,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAIE,gBAAgB;IAChF,MAAMC,eAAeJ,IAAAA,4CAA2B,EAAC,CAACC,MAAMA,IAAII,qBAAqB;IACjF,OAAOC,IAAAA,mCAAqB,EAAC;QACzBC,IAAI;QACJC,MAAM;QACNC,UAAUV,WAAW,IAAIW,SAAS;QAClC,GAAGP,mBAAmBC,aAAaO,iBAAiB,CAACd,YAAY,CAAC,CAAC;QACnE,GAAGF,KAAK;IACZ,GAAGC;AACP"}