import * as React from 'react';
import { resolveShorthand, useMergedRefs } from '@fluentui/react-utilities';
import { useVirtualizer_unstable } from '../Virtualizer/useVirtualizer';
import { useDynamicVirtualizerMeasure } from '../../Hooks';
import { useVirtualizerContextState_unstable } from '../../Utilities';
export function useVirtualizerScrollViewDynamic_unstable(props) {
    const contextState = useVirtualizerContextState_unstable(props.virtualizerContext);
    var _props_axis, _contextState_contextIndex;
    const { virtualizerLength , bufferItems , bufferSize , scrollRef  } = useDynamicVirtualizerMeasure({
        defaultItemSize: props.itemSize,
        direction: (_props_axis = props.axis) !== null && _props_axis !== void 0 ? _props_axis : 'vertical',
        getItemSize: props.getItemSize,
        currentIndex: (_contextState_contextIndex = contextState === null || contextState === void 0 ? void 0 : contextState.contextIndex) !== null && _contextState_contextIndex !== void 0 ? _contextState_contextIndex : 0,
        numItems: props.numItems
    });
    const iScrollRef = useMergedRefs(React.useRef(null), scrollRef);
    const virtualizerState = useVirtualizer_unstable({
        ...props,
        virtualizerLength,
        bufferItems,
        bufferSize,
        scrollViewRef: iScrollRef,
        virtualizerContext: contextState
    });
    return {
        ...virtualizerState,
        components: {
            ...virtualizerState.components,
            container: 'div'
        },
        container: resolveShorthand(props.container, {
            required: true,
            defaultProps: {
                ref: iScrollRef
            }
        })
    };
}
